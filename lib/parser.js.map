{"version":3,"sources":["../src/parser.js"],"names":["ops","require","opMap","EOF","String","fromCharCode","tpl","t","v","o","d","openTpl","commaTpl","closeTpl","handleBinOps","state","r","lastv","i","bin","cur","unmark","mark","peek","close","moveNextSibling","insertAfter","movePreviousSibling","insertBefore","openBefore","pop","arg2","moveLastChild","Object","assign","process","last","lastChild","call","push","open","hasOwnProperty","mappedOp","test","replace","depth","charReducer","next","char","undefined","emit","oldType","type","oldComment","comment","buffer","oldString","string","zero","qname","number","b","tmp","trie","path","match","Array","isArray","length","_k","trie2","_v","stop","flag","lastQname","line","column","newline","toL3","ret","entry","$t","$v","a","tokenize","$chars","Observable","create","$o","subscribe","complete","initLexerState","Triply","lex","$tpls","Error","moveRoot","traverse","initTokenState","ws","parse","pipe","chunk","toString","parseString","str"],"mappings":"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","sourcesContent":["import { Observable, from } from \"rxjs\";\r\nimport { mergeMap } from \"rxjs/operators\";\r\nimport { find } from \"./trie\";\r\nimport { reduceAround } from \"./rich-reducers\";\r\nimport { fromReadStream } from \"./node-stream\";\r\nimport Triply from \"triply\";\r\n\r\nconst ops = require(\"../operator-trie.json\");\r\n\r\nconst opMap = {\r\n\t801: \"subtract\",\r\n\t802: \"add\",\r\n\t903: \"divide\",\r\n\t904: \"multiply\",\r\n\t5003: \"zero-or-one\",\r\n\t3904: \"zero-or-more\",\r\n\t3802: \"one-or-more\",\r\n\t2003: \"$_\"\r\n};\r\n\r\n/*\r\nconst types = [\r\n\t\"item\",\r\n\t\"atomic\",\r\n\t\"string\",\r\n\t\"numeric\",\r\n\t\"integer\",\r\n\t\"number\",\r\n\t\"double\",\r\n\t\"decimal\",\r\n\t\"float\",\r\n\t\"function\",\r\n\t\"array\",\r\n\t\"map\"\r\n];\r\n*/\r\n\r\nconst EOF = String.fromCharCode(25);\r\n\r\nconst tpl = (t,v,o,d) => { return {t:t,v:v,o:o,d:d}; };\r\n\r\nconst openTpl = (d = 0) => tpl(1,1,\"(\",d);\r\n\r\nconst commaTpl = (d = 0) => tpl(3,100,\",\",d);\r\n\r\nconst closeTpl = (d = 0) => tpl(2,2,\")\",d);\r\n\r\n/*\r\nconst incr = a => a.map(x => {\r\n\tx.d++;\r\n\treturn x;\r\n});\r\n           (x)\r\n    $  --- /$ - , 2 - ) on close, nest:\r\n   /                      \\       mark call again\r\ncall                       /call - , 3 ) on close, nest\r\n*/\r\n\r\nfunction handleBinOps(state) {\r\n\tconst r = state.r;\r\n\tlet lastv;\r\n\tfor(let i = 0; i < state.bin; i++) {\r\n\t\t// handle each mark\r\n\t\t// mark again so we can peek\r\n\t\tconst cur = r.unmark(i).mark(i).peek();\r\n\t\t//console.log(\"bin\",_strip(cur));\r\n\t\t// normal case: last preceeds\r\n\t\tif(!lastv || lastv > cur.v) {\r\n\t\t\t// move to 2nd arg, insert closing paren, peek\r\n\t\t\tconst close = r.moveNextSibling().insertAfter(closeTpl()).peek();\r\n\t\t\t// move back to op`, move to 1st arg, insert opening paren, nest until 2nd arg\r\n\t\t\tr.unmark(i).movePreviousSibling().insertBefore(openTpl()).openBefore(cur,close);\r\n\t\t} else {\r\n\t\t\t// we should move out at the end\r\n\t\t\t// remove cur\r\n\t\t\tr.pop();\r\n\t\t\tr.moveNextSibling();\r\n\t\t\t// grab the next arg and remove it\r\n\t\t\tconst arg2 = r.pop();\r\n\t\t\t// move to the last operator and goto it's last child\r\n\t\t\tr.movePreviousSibling().moveLastChild()\r\n\t\t\t// insert the detached 2nd argument, followed by a comma and move to the 1st argument\r\n\t\t\t\t.insertBefore(arg2).insertBefore(commaTpl()).movePreviousSibling()\r\n\t\t\t// insert opening paren and open with all siblings (= open + 2nd argument + comma)\r\n\t\t\t\t.insertBefore(openTpl()).openBefore(cur);\r\n\t\t}\r\n\t\tlastv = cur.v;\r\n\t\tObject.assign(cur,commaTpl());\r\n\t}\r\n\r\n}\r\n\r\nfunction process(tpl,state) {\r\n\tconst t = tpl.t, v = tpl.v, r = state.r;\r\n\tif(t == 1) {\r\n\t\tconst last = r.lastChild();\r\n\t\tif(last && last.t === 2) {\r\n\t\t\t// 1. mark call\r\n\t\t\t//console.log(\"peek\",r.peek());\r\n\t\t\tstate.call = true;\r\n\t\t\t// nest entire tree\r\n\t\t\t// 2. push comma\r\n\t\t\t// TODO add original position to comma\r\n\t\t\tr.mark(\"call\").push(commaTpl());\r\n\t\t} else {\r\n\t\t\tr.open(tpl);\r\n\t\t}\r\n\t} else if(t == 2) {\r\n\t\tstate.r.push(tpl).close();\r\n\t\tif(state.call) {\r\n\t\t\t// $(x)(2) => call($(x),2)\r\n\t\t\tstate.call = false;\r\n\t\t\tr.unmark(\"call\").insertBefore(openTpl()).openBefore({t:6,v:\"call\"}).close();\r\n\t\t}\r\n\t\t/*\r\n\t\t* 1 * 2 + 3\r\n\t\t* mult(1,2) + 3\r\n\t\t* 1 + 2 * 3\r\n\t\t* add(1,2) * 3 => pre, so nest in last\r\n\t\t* add(1,2 * 3))\r\n\t\t* add(1,mult(2,3)) => pre, so next in last (we're in subs, so openBefore )\r\n\t\t */\r\n\t\t//console.log(\"peek\",_strip(r.peek()));\r\n\t\tif(state.bin) {\r\n\t\t\t// mark close so we can return to it\r\n\t\t\tr.mark(\"close\");\r\n\t\t\thandleBinOps(state);\r\n\t\t\tr.unmark(\"close\");\r\n\t\t\tstate.bin = 0;\r\n\t\t}\r\n\t} else if(t == 4){\r\n\t\tif(v == 119 || v == 2003) {\r\n\t\t\tif(opMap.hasOwnProperty(v)) tpl.o = opMap[v];\r\n\t\t\tstate.r.push(tpl).open(openTpl()).push(closeTpl()).close();\r\n\t\t} else if(v > 3800) {\r\n\t\t\t//state.r = [{t:4,v:v,o:opMap[v]},{t:1,v:1},...state.r,{t:2,v:2}];\r\n\t\t\tstate.r.insertAfter(closeTpl()).movePreviousSibling().insertBefore(openTpl()).openBefore({t:4,v:v,o:opMap[v]});\r\n\t\t}\r\n\t\tstate.r.push(tpl);\r\n\t\tif(v > 300 && v < 2100) {\r\n\t\t\tconst mappedOp = opMap.hasOwnProperty(v) ? opMap[v] : tpl.o;\r\n\t\t\t// if original operator is not same, it was an infix operator\r\n\t\t\t// so mark it for precedence and closing\r\n\t\t\t//console.log(r.peek());\r\n\t\t\tif(tpl.o !== mappedOp) {\r\n\t\t\t\tr.peek().o = mappedOp;\r\n\t\t\t\tr.mark(state.bin++);\r\n\t\t\t}\r\n\t\t}\r\n\t} else if(t == 6 && /^\\$/.test(v)) {\r\n\t\t// var\r\n\t\ttpl.v = v.replace(/^\\$/,\"\");\r\n\t\tstate.r.push({t:10,v:\"$\",o:\"$\"}).open({t:1,v:1}).push(tpl).push({t:2,v:2}).close();\r\n\t} else if(t === 0) {\r\n\t\tstate.r.push(tpl);\r\n\t\tif(state.bin) {\r\n\t\t\t// mark close so we can return to it\r\n\t\t\tr.mark(\"EOS\");\r\n\t\t\thandleBinOps(state);\r\n\t\t\tr.unmark(\"EOS\");\r\n\t\t\tstate.bin = 0;\r\n\t\t}\r\n\t} else {\r\n\t\tstate.r.push(tpl);\r\n\t}\r\n\tstate.depth = tpl.d;\r\n\treturn state;\r\n}\r\n\r\nfunction charReducer(state,next) {\r\n\tconst char = state.char;\r\n\tif(char === undefined) {\r\n\t\tstate.emit = void 0;\r\n\t\tstate.char = next;\r\n\t\treturn state;\r\n\t}\r\n\tif(char == EOF) {\r\n\t\tstate.emit = state.emit && state.tpl.t == 0 ? void 0 : {t:0, v:0, o:EOF};\r\n\t\treturn state;\r\n\t}\r\n\tconst oldType = state.type;\r\n\tconst oldComment = state.comment;\r\n\tconst buffer = state.buffer;\r\n\tconst oldString = state.string;\r\n\t//const oldTpl = state.tpl;\r\n\tconst zero = oldComment || state.qname || state.number ? false : oldString === 0;\r\n\tconst b = buffer + char;\r\n\tconst tmp = zero ? find(state.trie,char,b,state.path) : [[],[]];\r\n\tconst trie = tmp[0];\r\n\tconst path = tmp[1];\r\n\tlet match = 0;\r\n\tif(!trie) {\r\n\t\tmatch = 2;\r\n\t} else if(Array.isArray(trie)) {\r\n\t\tmatch = !trie.length ? 2 : trie[0]._k === b ? 3 : 0;\r\n\t} else if(\"_k\" in trie) {\r\n\t\tmatch = trie._k === b ? 1 : (path.length > 0 && path[0]._k === b) ? 5 : 0;\r\n\t}\r\n\tif(match !== 2) {\r\n\t\tconst tmp = find(trie,next,b + next,[...path]);\r\n\t\tconst trie2 = tmp[0];\r\n\t\tif(trie2 && ((Array.isArray(trie2) && trie2.length > 0) || \"_k\" in trie2)) {\r\n\t\t\t// still a match, stop this one\r\n\t\t\tmatch = 0;\r\n\t\t} else if(match == 3) {\r\n\t\t\t//console.log(trie[0],next);\r\n\t\t\tif(trie[0]._v > 4 && /[a-z]/.test(next)) match = 2;\r\n\t\t\t//match = 0;\r\n\t\t} else if(match === 0) {\r\n\t\t\t// next won't match, so neither will this\r\n\t\t\tmatch = 2;\r\n\t\t}\r\n\t}\r\n\tlet type;\r\n\t// skip anything but closers\r\n\tif(match == 1) {\r\n\t\ttype = trie._v;\r\n\t} else if(match == 3) {\r\n\t\ttype = trie[0]._v;\r\n\t} else if(match == 5) {\r\n\t\ttype = path[0]._v;\r\n\t} else if(/\\s/.test(char)) {\r\n\t\ttype = 10;\r\n\t} else if(/[0-9]/.test(char)) {\r\n\t\ttype = 11;\r\n\t} else if(/[a-zA-Z]/.test(char)) {\r\n\t\ttype = 12;\r\n\t} else {\r\n\t\ttype = 0;\r\n\t}\r\n\t//console.log(\"ct\",char,type,zero,next);\r\n\t//if((type == 802 || type == 904 || type == 2003) && state.lastQname && types.includes(state.lastQname.v)) {\r\n\t//\ttype += 3000;\r\n\t//}\r\n\t//\r\n\tlet number = (zero && (type == 11 || (type == 8 && oldType != 8 && /[0-9]/.test(next)))) || (state.number && (type === 0 || type == 11));\r\n\tlet qname = (zero && !number && type != 10 && match == 2) || (state.qname && type != 10);\r\n\tlet stop = (qname && /[^a-zA-Z0-9\\-_:]/.test(next)) || (number && /[^0-9.]/.test(next));\r\n\tlet flag;\r\n\tif(number || qname) {\r\n\t\tflag = 0;\r\n\t} else if(zero) {\r\n\t\tif(type == 6 || type == 7) {\r\n\t\t\tflag = 1; // open string :)\r\n\t\t} else if(type == 2501) {\r\n\t\t\tflag = 3; // open comment :)\r\n\t\t\t//} else if(type == 3 && oldType != 3 && next != \"{\" && opencount[0] > 0) then\r\n\t\t\t//    11 (: open enc-expr, TODO add double curly to TRIE :)\r\n\t\t\t//else if($enc-expr and $type == 4 and $has-quot == 0 and $next ne \"}\") then\r\n\t\t\t//    12 (: close enc-expr, TODO add double curly to TRIE :)\r\n\t\t} else {\r\n\t\t\tflag = 0;\r\n\t\t}\r\n\t} else {\r\n\t\t// for the parser we need at least to escape a single quote char, but it should be handled by the trie :)\r\n\t\tif((oldString == 6 && char == \"\\\"\" && next !== \"\\\"\") || (oldString == 7 && char == \"'\")) {\r\n\t\t\tflag = 2; //(: close string :)\r\n\t\t} else if(oldComment && char == \":\" && next == \")\") {\r\n\t\t\tflag = 4; //(: close comment :)\r\n\t\t\t//else if($attrkey == false() and empty($type) and head($opencount) gt 0) then\r\n\t\t\t//    9\r\n\t\t\t//else if($attrkey and $type == 509 and head($opencount) gt 0) then\r\n\t\t\t//    10\r\n\t\t} else {\r\n\t\t\tflag = 0;\r\n\t\t}\r\n\t}\r\n\tlet tpl;\r\n\tif(!flag) {\r\n\t\tif(stop && type != 9) {\r\n\t\t\ttpl = {t:number ? 8 : 6,v:b};\r\n\t\t} else if(number && type == 8) {\r\n\t\t\t// continue\r\n\t\t} else if(match != 2 && match !== 0) {\r\n\t\t\tlet t = type == 1 || type == 3 || type == 2001 ? 1 :\r\n\t\t\t\ttype == 2 || type == 4 || type == 2002 ? 2 :\r\n\t\t\t\t\ttype == 100 ? 3 :\r\n\t\t\t\t\t\ttype == 5 ? 0 :\r\n\t\t\t\t\t\t\ttype == 9 ? 10 :\r\n\t\t\t\t\t\t\t\ttype == 8 ? 13 :\r\n\t\t\t\t\t\t\t\t\t4;\r\n\t\t\ttpl = {t:t,v:type,o:b};\r\n\t\t}\r\n\t} else if(flag == 2 || flag == 4) {\r\n\t\ttpl = {t:flag == 2 ? 7 : 9,v:buffer};\r\n\t}\r\n\r\n\t// if the result is an array, it was expanded\r\n\t// in this case, emit will be overridden by process...\r\n\t// we should only just buffer 2 levels of depth:\r\n\t// one for the type and one for the occurrence indicator...\r\n\tif((zero && type == 10 && buffer == \"\") || tpl || flag) {\r\n\t\tstate.buffer = \"\";\r\n\t} else {\r\n\t\tstate.buffer = b;\r\n\t}\r\n\tif(qname) state.lastQname = tpl;\r\n\t// FIXME hack to skip a char\r\n\tstate.char = flag == 4 ? void 0 : next;\r\n\tstate.number = number && !stop;\r\n\tstate.qname = qname && !stop;\r\n\tstate.type = type;\r\n\tif(tpl) {\r\n\t\ttpl.line = state.line;\r\n\t\ttpl.column = state.column;\r\n\t\tstate.tpl = tpl;\r\n\t}\r\n\tstate.emit = tpl;\r\n\tlet newline = false;\r\n\tif(char == \"\\n\") newline = true;\r\n\tif(newline) {\r\n\t\tstate.line++;\r\n\t\tstate.column = 1;\r\n\t} else {\r\n\t\tstate.column++;\r\n\t}\r\n\r\n\tstate.trie = match > 0 ? ops : trie;\r\n\tstate.path = match > 0 ? [] : path;\r\n\tif(flag == 1) {\r\n\t\tstate.string = type;\r\n\t} else if(flag == 2) {\r\n\t\tstate.string = 0;\r\n\t} else if(flag == 3) {\r\n\t\tstate.comment = true;\r\n\t} else if(flag == 4) {\r\n\t\tstate.comment = false;\r\n\t}\r\n\treturn state;\r\n}\r\n\r\n/*\r\nfunction toRdl(ret,entry) {\r\n\tconst t = entry.t, v = entry.v;\r\n\tif(t === 0) {\r\n\t\tret += (\";\\n\\n\");\r\n\t} else if(t == 7) {\r\n\t\tret += (`\"${v}\"`);\r\n\t} else if(t == 6 || t == 8) {\r\n\t\tret += (v);\r\n\t} else if(t == 9) {\r\n\t\tret += (\"(:\"+v+\":)\");\r\n\t} else {\r\n\t\tret += (entry.o);\r\n\t}\r\n\treturn ret;\r\n}\r\n*/\r\n\r\nfunction toL3(ret,entry,last,next){\r\n\t//console.log(ret,entry,last,next);\r\n\tlet $t = entry.t;\r\n\tlet $v = entry.v;\r\n\tlet r = [];\r\n\tif($t == 1) {\r\n\t\tif($v == 3) {\r\n\t\t\tr = [15];\r\n\t\t} else if($v == 1) {\r\n\t\t\t//(: TODO check for last operator :)\r\n\t\t\tif(!last || last.t == 1) {\r\n\t\t\t\t//console.log(last);\r\n\t\t\t\tr = [14,\"\"];\r\n\t\t\t}\r\n\t\t}\r\n\t} else if($t == 2) {\r\n\t\tr = [17];\r\n\t} else if($t == 7) {\r\n\t\tr = [3,$v];\r\n\t} else if($t == 8) {\r\n\t\tif(/^\\./.test($v)) $v = \"0\" + $v;\r\n\t\tr = [12,$v];\r\n\t} else if($t == 6) {\r\n\t\tif(/#[0-9]$/.test($v)) {\r\n\t\t\tr = [4,$v+\"\"];\r\n\t\t} else {\r\n\t\t\tr = next && next.t == 1 && next.v == 1 ? [14,$v] : [3,$v];\r\n\t\t}\r\n\t} else if($t == 4 || $t == 10) {\r\n\t\tr = [14,entry.o];\r\n\t} else if($t == 5) {\r\n\t\tr = [3,$v];\r\n\t} else if($t == 9) {\r\n\t\tr = [8,$v];\r\n\t} else if($t == 11) {\r\n\t\tr = [1,$v];\r\n\t} else if($t == 12) {\r\n\t\tr = [2,$v];\r\n\t} else if($t == 13) {\r\n\t\tr = [14,\"$.\",17];\r\n\t}\r\n\t//return r ? ret.concat(r) : ret;//Observable.from(r) : Observable.empty();\r\n\tfor(let a of r) ret.next(a);\r\n\treturn ret;\r\n}\r\n\r\nexport const tokenize = state => $chars => {\r\n\treturn Observable.create($o => {\r\n\t\t$chars.subscribe({\r\n\t\t\tnext(cur) {\r\n\t\t\t\tcharReducer(state,cur);\r\n\t\t\t\tif(state.emit) {\r\n\t\t\t\t\t$o.next(state.emit);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tcomplete() {\r\n\t\t\t\tcharReducer(state,EOF);\r\n\t\t\t\tif(state.emit) $o.next(state.emit);\r\n\t\t\t\tcharReducer(state);\r\n\t\t\t\tif(state.emit) $o.next(state.emit);\r\n\t\t\t\t$o.complete();\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\t//return $chars.scan((state,cur) => charReducer(state,cur),state).filter(state => state.emit).map(state => state.emit);\r\n};\r\n//const dollarRE = /^\\$/;\r\n//const _strip = x => x && Object.entries(x).reduce((a,[k,v]) => dollarRE.test(k) ? a : (a[k] = v,a),{});\r\n\r\nconst initLexerState = () => {\r\n\treturn {\r\n\t\temit:false,\r\n\t\tdepth:0,\r\n\t\tr:new Triply(),\r\n\t\tcall:false,\r\n\t\tbin:0\r\n\t};\r\n};\r\n\r\nexport function lex($tpls) {\r\n\tlet state = initLexerState();\r\n\treturn Observable.create($o => {\r\n\t\t$tpls.subscribe({\r\n\t\t\tnext(tpl){\r\n\t\t\t\tconst r = state.r;\r\n\t\t\t\tlet depth = state.depth;\r\n\t\t\t\tif(tpl.t == 2) {\r\n\t\t\t\t\tdepth--;\r\n\t\t\t\t\tif(depth < 0) {\r\n\t\t\t\t\t\tthrow new Error(\"Incorrect depth of close\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!state.tpl || state.tpl.t == 3) throw new Error(\"Incorrect position of close\");\r\n\t\t\t\t} else if(tpl.t == 1) {\r\n\t\t\t\t\t//state.i[depth] = r.length;\r\n\t\t\t\t\tdepth++;\r\n\t\t\t\t}\r\n\t\t\t\ttpl.d = depth;\r\n\t\t\t\t//console.log(depth,tpl);\r\n\t\t\t\tstate = process(tpl,state);\r\n\t\t\t\tstate.tpl = tpl;\r\n\t\t\t\t// never emit tpl, oldTpl can be overriden\r\n\t\t\t\tif(tpl.t === 0) {\r\n\t\t\t\t\tif(depth !== 0){\r\n\t\t\t\t\t\t//console.log(tpl);\r\n\t\t\t\t\t\tthrow new Error(\"Incorrect depth at EOF\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tr.moveRoot().pop();\r\n\t\t\t\t\treduceAround(r.traverse(),toL3,$o);\r\n\t\t\t\t\t//$o.next(expandBinOps(state.r).reduce(toRdl,\"\"));\r\n\t\t\t\t\tstate.r = new Triply();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tcomplete(){\r\n\t\t\t\t$o.complete();\r\n\t\t\t}});\r\n\t});\r\n}\r\n\r\nexport const initTokenState = () => {\r\n\treturn {\r\n\t\ttype:0,\r\n\t\tbuffer:\"\",\r\n\t\tstring:0,\r\n\t\tflag:0,\r\n\t\ttrie:ops,\r\n\t\tws:false,\r\n\t\tnumber:false,\r\n\t\tcomment:false,\r\n\t\tqname: false,\r\n\t\tline: 1,\r\n\t\tcolumn: 1,\r\n\t\tpath: [],\r\n\t\ttpl: {},\r\n\t\temit:void 0\r\n\t};\r\n};\r\n\r\nexport const parse = path => fromReadStream(path).pipe(mergeMap(chunk => from(chunk.toString())),tokenize(initTokenState()),lex);\r\n\r\nexport const parseString = str => from(str).pipe(tokenize(initTokenState()),lex);\r\n"],"file":"parser.js"}